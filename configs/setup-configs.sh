#!/usr/bin/env bash

# setup-configs.sh - Configure nano, screen, and shell settings
# Implements configurations from nano.md, screen-gnu.md, and shell.md
#
# Usage: ./setup-configs.sh
#
# This script configures:
# - nano editor with sensible defaults and syntax highlighting
# - GNU screen with scrollback and mouse support
# - Shell aliases for safety and convenience (supports bash/zsh)
#
# The script automatically detects Linux vs macOS and configures appropriately.
# It provides options for user-specific or system-wide installation.
# Existing configuration files are backed up before modification.

set -euo pipefail

# Colors for output
readonly RED='\033[0;31m'
readonly GREEN='\033[0;32m'
readonly YELLOW='\033[1;33m'
readonly BLUE='\033[0;34m'
readonly NC='\033[0m' # No Color

# Detect OS
detect_os() {
    if [[ "$OSTYPE" == "darwin"* ]]; then
        echo "macos"
    elif [[ "$OSTYPE" == "linux-gnu"* ]]; then
        echo "linux"
    else
        echo "unknown"
    fi
}

# Print colored output
print_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Backup file if it exists
backup_file() {
    local file="$1"
    if [[ -f "$file" ]]; then
        local backup
        backup="${file}.backup.$(date +%Y%m%d_%H%M%S)"
        cp "$file" "$backup"
        print_info "Backed up existing file: $file -> $backup"
    fi
}

# Configure nano
configure_nano() {
    local os="$1"
    local scope="$2"  # "user" or "system"
    
    print_info "Configuring nano..."
    
    local config_file
    if [[ "$scope" == "system" ]]; then
        config_file="/etc/nanorc"
        if [[ ! -w "/etc" ]]; then
            print_error "No write permission to /etc. Run as root or choose user scope."
            return 1
        fi
    else
        config_file="$HOME/.nanorc"
    fi
    
    # Check if file exists and warn user
    if [[ -f "$config_file" ]]; then
        print_warning "Configuration file $config_file already exists!"
        read -p "Do you want to append to it? (y/N): " -r
        if [[ ! $REPLY =~ ^[Yy]$ ]]; then
            print_info "Skipping nano configuration."
            return 0
        fi
        backup_file "$config_file"
    fi
    
    # Create nano configuration
    {
        echo "# nano configuration - generated by setup-configs.sh"
        echo "# $(date)"
        echo ""
        echo "set atblanks"
        echo "set autoindent"
        echo "set constantshow"
        echo "set indicator"
        echo "set linenumbers"
        echo "set minibar"
        echo "set mouse"
        echo "set multibuffer"
        echo "set nonewlines"
        echo "set smarthome"
        echo "set softwrap"
        echo "set tabsize 4"
        
        # Add homebrew include for macOS
        if [[ "$os" == "macos" ]]; then
            echo ""
            echo "# homebrew nano syntax definitions"
            echo 'include "/opt/homebrew/share/nano/*.nanorc"'
        fi
        echo ""
    } >> "$config_file"
    
    print_success "Nano configuration added to $config_file"
}

# Configure GNU screen
configure_screen() {
    local os="$1"
    local scope="$2"  # "user" or "system"
    
    print_info "Configuring GNU screen..."
    
    local config_file
    if [[ "$scope" == "system" ]]; then
        config_file="/etc/screenrc"
        if [[ ! -w "/etc" ]]; then
            print_error "No write permission to /etc. Run as root or choose user scope."
            return 1
        fi
    else
        config_file="$HOME/.screenrc"
    fi
    
    # Check if file exists and warn user
    if [[ -f "$config_file" ]]; then
        print_warning "Configuration file $config_file already exists!"
        read -p "Do you want to append to it? (y/N): " -r
        if [[ ! $REPLY =~ ^[Yy]$ ]]; then
            print_info "Skipping screen configuration."
            return 0
        fi
        backup_file "$config_file"
    fi
    
    # Create screen configuration
    {
        echo "# GNU screen configuration - generated by setup-configs.sh"
        echo "# $(date)"
        echo ""
        echo "startup_message off"
        echo ""
        echo "defscrollback 9999"
        echo "scrollback 9999"
        echo ""
        echo "defmousetrack on"
        echo "mousetrack on"
        echo ""
    } >> "$config_file"
    
    print_success "GNU screen configuration added to $config_file"
}

# Configure shell
configure_shell() {
    local os="$1"
    
    print_info "Configuring shell aliases..."
    
    # Determine shell config file
    local shell_config
    if [[ "$os" == "macos" ]]; then
        shell_config="$HOME/.zshrc"
    else
        shell_config="$HOME/.bashrc"
    fi
    
    # Check if file exists
    if [[ -f "$shell_config" ]]; then
        print_warning "Shell configuration file $shell_config already exists!"
        read -p "Do you want to append to it? (y/N): " -r
        if [[ ! $REPLY =~ ^[Yy]$ ]]; then
            print_info "Skipping shell configuration."
            return 0
        fi
        backup_file "$shell_config"
    fi
    
    # Create shell configuration
    {
        echo ""
        echo "# Shell configuration - generated by setup-configs.sh"
        echo "# $(date)"
        echo ""
        echo "# Aliases to help avoid some mistakes:"
        echo "alias cp='cp -aiv'"
        echo "alias mkdir='mkdir -v'"
        echo "alias mv='mv -iv'"
        echo "alias rm='rm -Iv'"
        echo ""
        echo "alias chmod='chmod -vv'"
        echo "alias chown='chown -vv'"
        echo ""
        
        # OS-specific ls configuration
        if [[ "$os" == "macos" ]]; then
            echo "# macOS ls configuration"
            echo "export CLICOLOR=YES"
            echo "alias ls='ls -AFGHhl'"
        else
            echo "# Linux ls configuration"
            echo "alias ls='ls --color=auto --group-directories-first -AFHhl'"
        fi
        
        echo ""
        echo "# Additional utility aliases"
        echo "alias lsblk='lsblk -o \"NAME,FSTYPE,FSVER,LABEL,FSAVAIL,SIZE,FSUSE%,MOUNTPOINTS,UUID\"'"
        echo "alias lxc-ls='lxc-ls -f'"
        echo ""
        
        # 7z compression helpers
        if [[ "$os" == "macos" ]]; then
            echo "# 7z compression helpers (macOS - using 7zz)"
            echo "alias 7z-ultra1='7zz a -t7z -m0=lzma2 -mx=9 -md=256m -mfb=273 -mmf=bt4 -ms=on -mmt'"
            echo "alias 7z-ultra2='7zz a -t7z -m0=lzma2 -mx=9 -md=512m -mfb=273 -mmf=bt4 -ms=on -mmt'"
            echo "alias 7z-ultra3='7zz a -t7z -m0=lzma2 -mx=9 -md=1536m -mfb=273 -mmf=bt4 -ms=on -mmt'"
        else
            echo "# 7z compression helpers"
            echo "alias 7z-ultra1='7z a -t7z -m0=lzma2 -mx=9 -md=256m -mfb=273 -mmf=bt4 -ms=on -mmt'"
            echo "alias 7z-ultra2='7z a -t7z -m0=lzma2 -mx=9 -md=512m -mfb=273 -mmf=bt4 -ms=on -mmt'"
            echo "alias 7z-ultra3='7z a -t7z -m0=lzma2 -mx=9 -md=1536m -mfb=273 -mmf=bt4 -ms=on -mmt'"
        fi
        echo ""
    } >> "$shell_config"
    
    print_success "Shell configuration added to $shell_config"
    print_info "Note: You may need to run 'source $shell_config' or restart your terminal for changes to take effect."
}

# Main function
main() {
    print_info "System Configuration Setup Script"
    print_info "================================="
    
    local os
    os=$(detect_os)
    print_info "Detected OS: $os"
    
    if [[ "$os" == "unknown" ]]; then
        print_error "Unknown operating system. This script supports Linux and macOS."
        exit 1
    fi
    
    # Get user preferences
    echo ""
    print_info "This script will configure:"
    echo "  - nano editor settings"
    echo "  - GNU screen settings"
    echo "  - Shell aliases and configurations"
    echo ""
    
    read -p "Continue? (y/N): " -r
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        print_info "Setup cancelled."
        exit 0
    fi
    
    # Ask for scope (user vs system)
    echo ""
    print_info "Choose configuration scope:"
    echo "  1) User-specific (recommended)"
    echo "  2) System-wide (requires root privileges)"
    read -p "Enter choice (1-2): " -r scope_choice
    
    local scope
    case "$scope_choice" in
        1) scope="user" ;;
        2) scope="system" ;;
        *) 
            print_warning "Invalid choice. Defaulting to user-specific."
            scope="user"
            ;;
    esac
    
    # Configure each component
    echo ""
    configure_nano "$os" "$scope"
    echo ""
    configure_screen "$os" "$scope"
    echo ""
    configure_shell "$os"
    
    echo ""
    print_success "Configuration setup complete!"
    print_info "You may need to restart your terminal or source your shell configuration file for all changes to take effect."
}

# Run main function if script is executed directly
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    main "$@"
fi